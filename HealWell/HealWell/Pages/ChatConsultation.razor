@page "/chat-consultation/{PatientId:int}"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject PatientService patientservice
@inject IJSRuntime JSRuntime
@using HealWell.Services
<style>
    body { 
    background-color: #fafafa; 
    }
</style>
<Header></Header>

@* <div class="chat-consultation-container dark:bg-gray-900 min-h-screen py-5 px-4 transition-colors duration-300"> *@
<div style="margin-top:50px; margin-bottom:30px; "class="py-5 px-4 min-h-screen chat-box mx-auto max-w-3xl bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-5 transition-colors duration-300">
    <div class="flex justify-between items-center border-b dark:border-gray-700 pb-3 mb-4">
        <div class="flex items-center gap-3">
            <i style="color:black !important"class="fas fa-robot text-xl text-blue-600 dark:text-blue-400"></i>
            <h2 style="color:black !important" class="text-xl font-semibold dark:text-white">AI Medical Assistant</h2>
        </div>
        <div class="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
            <span class="inline-block w-3 h-3 bg-green-500 rounded-full animate-pulse"></span>
            <span style="color:black !important">@aiDoctor.Name is online</span>
        </div>
    </div>

    <div class="chat-body space-y-4 overflow-y-auto max-h-[400px] scrollbar-thin scrollbar-thumb-gray-300 dark:scrollbar-thumb-gray-600 scrollbar-track-transparent" @ref="chatContainer">
        @if (messages.Count == 0)
        {
            <div class="text-center text-gray-500 dark:text-gray-400">No messages yet.</div>
        }

        @foreach (var message in messages)
        {
            if (message.IsDoctor)
            {
                <div class="flex items-start gap-3">
                    <img src="images/ai-doc.jpeg" alt="AI" style="margin-left:10px; height:50px; width:50px; border-radius:40px;" class="rounded-full" />
                    <div class="bg-blue-100 dark:bg-blue-900 text-sm rounded-xl px-4 py-2 shadow">
                        <div class="text-xs font-semibold text-gray-700 dark:text-blue-200 mb-1">@aiDoctor.Name</div>
                        <div class="dark:text-gray-300">@message.Text</div>
                        <div class="text-right text-xs text-gray-500 dark:text-gray-400 mt-1">@message.Timestamp.ToString("h:mm tt")</div>
                    </div>
                </div>
            }
            else
            {
                <div class="flex justify-end">
                    <div class="bg-gray-200 dark:bg-gray-700 text-sm rounded-xl px-4 py-2 shadow text-right max-w-xs">
                        <div class="text-xs font-semibold text-gray-700 dark:text-gray-300 mb-1">You</div>
                        <div class="dark:text-gray-300">@message.Text</div>
                        <div class="text-xs text-gray-500 dark:text-gray-400 mt-1">@message.Timestamp.ToString("h:mm tt")</div>
                    </div>
                </div>
            }
        }
    </div>

    <div style="background-color:white!important"class="chat-footer mt-4 border-t dark:border-gray-700 pt-3 flex flex-col sm:flex-row items-center gap-3">
        <input type="text"
        style="flex: 1 1 auto !important; min-width: 500px !important"
        class="border border-gray-300 dark:border-gray-600 rounded-full px-4 py-2 bg-white dark:bg-gray-700 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all"
        placeholder="Type your message..."
        @bind="newMessage"
        @bind:event="oninput"
        @onkeypress="HandleKeyPress" />

        <!-- Send Button -->
        <button @onclick="SendMessage"
        style="margin-left:7px !important; background-color:#00897b !important; color: white !important; padding: 8px 16px !important; border: none !important; border-radius: 9999px !important; cursor: pointer !important; transition: background-color 0.3s !important;"
        onmouseover="this.style.backgroundColor='#2563eb'"
        onmouseout="this.style.backgroundColor='#3b82f6'">
            <i class="fas fa-paper-plane"></i>
        </button>

        <!-- End Consultation Button -->
        <button @onclick="EndConsultation"
        style="color: #dc2626 !important; background: none !important; border: none !important; font-size: 0.875rem !important; cursor: pointer !important; transition: color 0.3s !important;"
        onmouseover="this.style.color='#991b1b'"
        onmouseout="this.style.color='#dc2626'">
            <i class="fas fa-phone-slash"></i> End
        </button>

    </div>
</div>
@* </div> *@

<Footer></Footer>

@code {
    private ElementReference chatContainer;
    private string newMessage = string.Empty;
    private List<ChatMessage> messages = new();

    // Replace with logged-in user ID if using Identity
    [Parameter]
    public int PatientId { get; set; }

    private readonly AiDoctor aiDoctor = new()
        {
            Name = "Dr. AI",
            ImageUrl = "images/ai-avatar.png"
        };

    protected override async Task OnInitializedAsync()
    {
        await LoadMessages();
        

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await chatContainer.FocusAsync();
            await ScrollToBottom();
        }
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", chatContainer);
    }

    private async Task LoadMessages()
    {
        try
        {
            messages = await Http.GetFromJsonAsync<List<ChatMessage>>($"https://localhost:7047/api/Chat/{PatientId}") ?? new();
            StateHasChanged();
            await ScrollToBottom();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading messages: " + ex.Message);
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(newMessage)) return;

        var userMessage = new ChatMessage
            {
                PatientId = PatientId,
                Text = newMessage,
                IsDoctor = false,
                Timestamp = DateTime.UtcNow
            };

        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7047/api/Chat", userMessage);
            if (response.IsSuccessStatusCode)
            {
                var returnedMessages = await response.Content.ReadFromJsonAsync<List<ChatMessage>>();
                if (returnedMessages != null)
                {
                    messages.AddRange(returnedMessages);
                }
                newMessage = string.Empty;
                await ScrollToBottom();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error sending message: " + ex.Message);
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private void EndConsultation()
    {
        Navigation.NavigateTo("/consultation-complete");
    }

    public class AiDoctor
    {
        public string Name { get; set; } = "";
        public string ImageUrl { get; set; } = "";
    }
}